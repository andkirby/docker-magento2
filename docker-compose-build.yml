# Declare your hostname before running docker-compose
# $ export M2SETUP_PROJECT=myproject
version: "2"
services:
  varnish:
    container_name: varnish.${M2SETUP_PROJECT}
    build:
      context: varnish/
    environment:
    - VIRTUAL_HOST=${M2SETUP_VIRTUAL_HOST}
    - VIRTUAL_PORT=80
    - HTTPS_METHOD=redirect
    ports:
    - '${M2SETUP_PORT_80}:80'
    links:
    - web

  web:
    container_name: web.${M2SETUP_PROJECT}
    build:
      context: nginx/
    ports:
    - '${M2SETUP_PORT_443}:443'
    - 80
    links:
    - fpm
    - db
    volumes_from:
    - appdata
    env_file:
    - global.env
    environment:
    - VIRTUAL_HOST=${M2SETUP_PROJECT}
    - VIRTUAL_PORT=80
    - HTTPS_METHOD=redirect
    expose:
      - 80

  fpm:
    container_name: fpm.${M2SETUP_PROJECT}
    hostname: fpm.${M2SETUP_PROJECT}
    build:
      context: fpm/
    expose:
      - 9000
    ports:
    - '${M2SETUP_PORT_9000}:9000'
    links:
    - db
    - mailcatcher
    volumes_from:
    - appdata
    env_file:
    - global.env
    environment:
    # Mailcatcher set up
    - USE_MAILCATCHER=true
    - SSMTP_SMTP_SERVER=mailcatcher:1025
    - SSMTP_REWRITE_DOMAIN=${M2SETUP_VIRTUAL_HOST}

  db:
    container_name: db.${M2SETUP_PROJECT}
    image: mariadb:10
    ports:
    - '${M2SETUP_PORT_3306}:3306'
    volumes_from:
    - dbdata
    volumes:
    - './db/my.conf:/etc/mysql/conf.d/magento.conf'
    environment:
    - MYSQL_ROOT_PASSWORD=magento2
    - MYSQL_DATABASE=magento2
    - MYSQL_USER=magento2
    - MYSQL_PASSWORD=magento2

  cli:
    hostname: cli.${M2SETUP_PROJECT}
    container_name: cli.${M2SETUP_PROJECT}
    build:
      context: cli/
    links:
    - db
    volumes:
    - '~/.composer/cache:/var/www/.composer/cache'
    volumes_from:
    - appdata
    env_file:
    - ./global.env
    - ./composer.env
    environment:
    - ENABLE_SENDMAIL=false
    - M2SETUP_INSTALL_DB=true
    - M2SETUP_DB_HOST=db
    - M2SETUP_DB_NAME=magento2
    - M2SETUP_DB_USER=magento2
    - M2SETUP_DB_PASSWORD=magento2
    - M2SETUP_BASE_URL=http://${M2SETUP_VIRTUAL_HOST}/
    - M2SETUP_SECURE_BASE_URL=https://${M2SETUP_VIRTUAL_HOST}/
    - M2SETUP_BACKEND_FRONTNAME=admin
    - M2SETUP_ADMIN_FIRSTNAME=Admin
    - M2SETUP_ADMIN_LASTNAME=User
    - M2SETUP_ADMIN_EMAIL=admin@example.com
    - M2SETUP_ADMIN_USER=admin
    - M2SETUP_ADMIN_PASSWORD=qweqwe1
    - M2SETUP_VERSION=2.3
    #- M2SETUP_USE_SAMPLE_DATA=false
    - M2SETUP_PROJECT_TYPE=community
    # Mailcatcher set up
    - USE_MAILCATCHER=true
    - SSMTP_SMTP_SERVER=mailcatcher:1025
    - SSMTP_REWRITE_DOMAIN=${M2SETUP_VIRTUAL_HOST}

  cron:
    hostname: cron.${M2SETUP_PROJECT}
    container_name: cron.${M2SETUP_PROJECT}
    build:
      context: cli/
    command: run-cron
    environment:
      - ENABLE_SENDMAIL=false
      # Mailcatcher set up
      - USE_MAILCATCHER=true
      - SSMTP_SMTP_SERVER=mailcatcher:1025
      - SSMTP_REWRITE_DOMAIN=${M2SETUP_VIRTUAL_HOST}
    volumes_from:
    - appdata
    links:
    - db

  mailcatcher:
    image: yappabe/mailhog
    environment:
      DNSDOCK_ALIAS: mailhog.${M2SETUP_PROJECT}
    container_name: mailcatcher.${M2SETUP_PROJECT}
    ports:
      # HTTP web UI 8080 port mapping
      - "${M2SETUP_PORT_8080}:8025"

  appdata:
    image: tianon/true
    volumes:
    - ./magento:/var/www/magento

  dbdata:
    image: tianon/true
    volumes:
    - /var/lib/mysql
